import java.util.*;

import sun.security.provider.JavaKeyStore.CaseExactJKS;
/**
 * @author 一个有趣的人
 * @author 3410322436@qq.com
 * 我就在Core这个类谈谈我对整个系统的看法，这里Core是整个系统的开始
 * 我是以MVC模式设计这个系统的，最基本的由database提供数据，core组织逻辑，而ui负责页面的展示
 */

/**
 * 
 * @author 一个有趣的人
 *	这个类是专门为了UI和Core进行信息传递使用的
 */
class data {
	int intNum;
	float floatNum;
	String string;
	ArrayList<Interger> intArray;
	ArrayList<float> floatArray;
}

public class Core {
	public static void main(String[] args) {
		Process app = new Process();
		app.start();
	}
}

class Flag {
	static final int EXIT = 0;
	static final int RUN = 1;
	static final int LoginError = -1;
}

class Process {
	static int status = Flag.EXIT;
	static String priority = "None";
	static ArrayList<Integer> permission = new ArrayList<Integer>(0);
	static int counter = 0;
	static String fileDir = "database.db"; // 数据库文件
	
	Database database;
	public void start() {
		UI.welcomePage();
		if (IO.isFileExists(fileDir)) {
			database = (Database) IO.readData(fileDir);
			login();
		} else {
			register();
		}
		on();
	}
	public void login() {
		// userName = userInfo[0], password = userInfo[1]
		String[] userInfo = UI.loginPage();
		priority = database.userVerify(userInfo);
		if (priority.equals(Flag.LoginError)) {
			counter++;
			if(counter < 3) {
				UI.errorMsg("员工号或密码错误，请重新登陆");
				login();
			} else {
				UI.errorMsg("登陆失败已达3次，退出程序");
				exit();
			}
		}
		on();
	}
	public void DBAregister() {
		database = new Database();
		UI.dbaRegisterPage();
	}
	public void register() {
		Set<String> roleInfo = database.getRole();
		String[] userInfo = UI.registerPage(roleInfo);
		// 写到这里我在犹豫要不要用字典控制权限 <角色名，功能合集>
		int userID = Integer.parseInt(userInfo[0]);
		String name = userInfo[1], password = userInfo[2], priority = userInfo[3];
		database.addUsers(userID, name, password, priority);
	}
	
	/**
	 * 我这里感觉自己写的严重碎片化了
	 * 其实感觉可以将其分层管理，只是懒得麻烦，希望什么时候把这个地方拆出去
	 * 比如变成UserMangement对吧？就不用写那么多，我这么写是想着权限控制可以变得十分细粒
	 * 我想了想，应该用中间件的形式进行多层传递，希望以后有机会再做吧
	 */
	public void on() {
		while(true) {
			ArrayList<Integer> rolePermission = database.getPermission(priority); //在角色表没有添加权限时没必要刷新
			int choice =  UI.mainMenuPage(rolePermission);
			switch (choice) {
			case 0:
				exit();break;
			//DBA管理员
			case 1:
				addUser();break;
			case 2:
				addRole();break;
			case 3:
				changeRole();break;
			case 4:
				makeDayReport();break;
			case 5:
				getDayReport();break;
			//前台
			case 6:
				searchTable();break;
			case 7:
				makeOrder();break;
			case 8:
				makePayment();break;
			//后厨
			case 9:
				checkTodoList();break;
			case 10:
				finishOrder();break; //这里设想的情景是后厨做完后叫前台，但是实在懒得写了。
			}
		}
		exit();
	}
	public void exit() {
		IO.writeData(database, fileDir);
		System.exit(0);
	}
	public void addUser() {
		register();
	}
	public void addRole() {
		
	}
	public void changeRole() {
		
	}
	public void makeDayReport() {
		
	}
	public void getDayReport() {
		
	}
	public void searchTable() {
		
	}
	public void makeOrder() {
		
	}
	public void makePayment() {
		
	}
	public void checkTodoList() {
		
	}
	public void finishOrder() {
		
	}
}